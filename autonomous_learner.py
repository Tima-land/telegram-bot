import logging
import json
import os
import shutil
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ROLE_SELECTION, REPORT_PHOTO, REPORT_TEXT, UPLOAD_NEXT_LESSON = range(4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'b1ot_data.json'
LESSONS_DIR = 'le1ssons'
REPORTS_DIR = 're1ports'

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
MOTHER_KEYBOARD = ReplyKeyboardMarkup(
    [["üìù –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫", "üìã –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤", "üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–¥–∞–Ω–∏–∏"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

SON_KEYBOARD = ReplyKeyboardMarkup(
    [["üé¨ –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫", "üìù –°–¥–∞—Ç—å –æ—Ç—á–µ—Ç"]],
    resize_keyboard=True,
    one_time_keyboard=False
)


class BotData:
    @staticmethod
    def reset():
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞"""
        data = {
            'users': {},
            'lessons': {},
            'reports': {},
            'lesson_counter': 1
        }
        with open(DATA_FILE, 'w') as f:
            json.dump(data, f, indent=2)

        for folder in [LESSONS_DIR, REPORTS_DIR]:
            if os.path.exists(folder):
                shutil.rmtree(folder)
            os.makedirs(folder)

        logger.info("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã")

    @staticmethod
    def load():
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ"""
        if not os.path.exists(DATA_FILE):
            BotData.reset()
        with open(DATA_FILE, 'r') as f:
            return json.load(f)

    @staticmethod
    def save(data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        with open(DATA_FILE, 'w') as f:
            json.dump(data, f, indent=2)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –≤—ã–±–æ—Ä —Ä–æ–ª–∏"""
    data = BotData.load()
    user_id = str(update.effective_user.id)

    if user_id in data['users']:
        role = data['users'][user_id]['role']
        if role == 'mother':
            await update.message.reply_text(
                "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ üë© –ú–∞—Ç—å",
                reply_markup=MOTHER_KEYBOARD
            )
        else:
            await update.message.reply_text(
                "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ üë¶ –°—ã–Ω",
                reply_markup=SON_KEYBOARD
            )
            await show_son_status(update.message, data, user_id)
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton("üë© –ú–∞—Ç—å", callback_data='mother')],
        [InlineKeyboardButton("üë¶ –°—ã–Ω", callback_data='son')]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ROLE_SELECTION


async def show_son_status(message, data, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å—ã–Ω–∞"""
    current_lesson = data['users'][user_id].get('current_lesson', 1)
    lesson_key = str(current_lesson)

    if lesson_key in data['lessons']:
        message_text = "–£—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üé¨ –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫'"
    else:
        message_text = f"–£—Ä–æ–∫ #{current_lesson} –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."

    await message.reply_text(
        f"üë¶ –°—ã–Ω\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: #{current_lesson}\n{message_text}",
        reply_markup=SON_KEYBOARD
    )


async def role_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    role = query.data
    data = BotData.load()

    data['users'][user_id] = {
        'role': role,
        'current_lesson': 1,
        'name': query.from_user.full_name
    }
    BotData.save(data)

    if role == 'mother':
        await query.message.reply_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: üë© –ú–∞—Ç—å\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=MOTHER_KEYBOARD
        )
    else:
        await query.message.reply_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: üë¶ –°—ã–Ω\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=SON_KEYBOARD
        )
        await show_son_status(query.message, data, user_id)

    return ConversationHandler.END


async def request_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞"""
    data = BotData.load()
    user_id = str(update.effective_user.id)

    if data['users'].get(user_id, {}).get('role') != 'mother':
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—Ä–æ–∫–∏!", reply_markup=MOTHER_KEYBOARD)
        return ConversationHandler.END

    lesson_number = data['lesson_counter']
    data['lesson_counter'] += 1
    BotData.save(data)

    lesson_dir = os.path.join(LESSONS_DIR, str(lesson_number))
    os.makedirs(lesson_dir, exist_ok=True)

    await update.message.reply_text(
        f"üìù –°–æ–∑–¥–∞–Ω —É—Ä–æ–∫ #{lesson_number}\n"
        "–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ (–≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ):",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data['uploading_lesson'] = lesson_number
    return UPLOAD_NEXT_LESSON


async def handle_lesson_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Ä–æ–∫–∞"""
    if not (update.message.video or update.message.photo):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ")
        return UPLOAD_NEXT_LESSON

    data = BotData.load()
    lesson_number = context.user_data.get('uploading_lesson')

    if not lesson_number:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=MOTHER_KEYBOARD)
        return ConversationHandler.END

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    lesson_dir = os.path.join(LESSONS_DIR, str(lesson_number))
    file_path = None

    if update.message.video:
        video = update.message.video
        file_path = os.path.join(lesson_dir, 'lesson.mp4')
        await (await video.get_file()).download_to_drive(file_path)
        media_type = 'video'
    else:
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        file_path = os.path.join(lesson_dir, 'lesson.jpg')
        await (await photo.get_file()).download_to_drive(file_path)
        media_type = 'photo'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
    data['lessons'][str(lesson_number)] = {
        'path': file_path,
        'type': media_type,
        'uploaded_by': str(update.effective_user.id),
        'timestamp': datetime.now().isoformat(),
        'size': os.path.getsize(file_path)
    }
    BotData.save(data)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—ã–Ω–æ–≤–µ–π
    sons_notified = 0
    for uid, user_data in data['users'].items():
        if user_data.get('role') == 'son' and user_data.get('current_lesson') == lesson_number:
            try:
                await context.bot.send_message(
                    chat_id=int(uid),
                    text=f"üéâ –£—Ä–æ–∫ #{lesson_number} –≥–æ—Ç–æ–≤!\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üé¨ –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.",
                    reply_markup=SON_KEYBOARD
                )
                sons_notified += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")

    await update.message.reply_text(
        f"‚úÖ –£—Ä–æ–∫ #{lesson_number} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–æ {sons_notified} —Å—ã–Ω–æ–≤–µ–π.",
        reply_markup=MOTHER_KEYBOARD
    )
    return ConversationHandler.END


async def get_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ä–æ–∫–∞ —É—á–µ–Ω–∏–∫—É"""
    data = BotData.load()
    user_id = str(update.effective_user.id)

    if data['users'].get(user_id, {}).get('role') != 'son':
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—ã–Ω–æ–≤—å—è –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —É—Ä–æ–∫–∏!", reply_markup=SON_KEYBOARD)
        return

    current_lesson = data['users'][user_id].get('current_lesson', 1)
    lesson = data['lessons'].get(str(current_lesson))
    if not lesson:
        keyboard = [[InlineKeyboardButton("üìû –£–≤–µ–¥–æ–º–∏—Ç—å –º–∞–º—É", callback_data='notify_mother')]]
        await update.message.reply_text(
            f"‚ùå –£—Ä–æ–∫ #{current_lesson} –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if lesson.get('type', 'video') == 'video':
            await update.message.reply_video(
                video=open(lesson['path'], 'rb'),
                caption=f"üé¨ –£—Ä–æ–∫ #{current_lesson}",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_photo(
                photo=open(lesson['path'], 'rb'),
                caption=f"üì∏ –£—Ä–æ–∫ #{current_lesson}",
                reply_markup=ReplyKeyboardRemove()
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        data['users'][user_id]['current_lesson'] = current_lesson + 1
        BotData.save(data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
        context.user_data['last_lesson'] = current_lesson

        keyboard = [[InlineKeyboardButton("üìù –°–¥–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data=f'submit_report_{current_lesson}')]]
        await update.message.reply_text(
            "‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!\n–ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è —Å–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ä–æ–∫–∞: {e}")
        await update.message.reply_text(
            "‚úÖ –£—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º, —Å–æ–æ–±—â–∏—Ç–µ –º–∞–º–µ.",
            reply_markup=SON_KEYBOARD
        )


async def notify_mother(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–∫"""
    query = update.callback_query
    await query.answer()

    data = BotData.load()
    user_id = str(query.from_user.id)
    user_data = data['users'].get(user_id, {})

    if user_data.get('role') != 'son':
        await query.edit_message_text(
            "‚ùå –¢–æ–ª—å–∫–æ —Å—ã–Ω–æ–≤—å—è –º–æ–≥—É—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –º–∞–º—É!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="cancel")]])
        )
        return

    current_lesson = user_data.get('current_lesson', 1)
    son_name = user_data.get('name', '–°—ã–Ω')
    mothers = [uid for uid, udata in data['users'].items() if udata.get('role') == 'mother']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞
    lesson_status = "–µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    if str(current_lesson) in data['lessons']:
        lesson_status = "—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω"

    notification_sent = False
    for mother_id in mothers:
        try:
            await context.bot.send_message(
                chat_id=int(mother_id),
                text=f"üë∂ *{son_name}* –æ–∂–∏–¥–∞–µ—Ç —É—Ä–æ–∫ #{current_lesson}\n"
                     f"–°—Ç–∞—Ç—É—Å: _{lesson_status}_\n\n"
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!",
                parse_mode='Markdown',
                reply_markup=MOTHER_KEYBOARD
            )
            notification_sent = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏ {mother_id}: {e}")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å—ã–Ω—É
    reply_markup = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", callback_data="check_availability")]]
    )

    if notification_sent:
        await query.edit_message_text(
            f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Ç–µ—Ä–∏!\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É—Ä–æ–∫, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω.",
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏",
            reply_markup=reply_markup
        )



async def remind_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—ã–Ω—É –æ –∑–∞–¥–∞–Ω–∏–∏"""
    data = BotData.load()
    user_id = str(update.effective_user.id)

    if data['users'].get(user_id, {}).get('role') != 'mother':
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏ –º–æ–≥—É—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–¥–∞–Ω–∏—è—Ö!", reply_markup=MOTHER_KEYBOARD)
        return

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Å—ã–Ω–æ–≤–µ–π
    sons = [(uid, udata) for uid, udata in data['users'].items() if udata.get('role') == 'son']
    if not sons:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—ã–Ω–æ–≤–µ–π!", reply_markup=MOTHER_KEYBOARD)
        return

    reminders_sent = 0
    for son_id, son_data in sons:
        current_lesson = son_data.get('current_lesson', 1)
        try:
            await context.bot.send_message(
                chat_id=int(son_id),
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç –º–∞–º—ã!\n"
                     f"–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—Ä–æ–∫ #{current_lesson}",
                reply_markup=SON_KEYBOARD
            )
            reminders_sent += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {son_id}: {e}")

    await update.message.reply_text(
        f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {reminders_sent} —Å—ã–Ω–æ–≤—å—è–º!",
        reply_markup=MOTHER_KEYBOARD
    )


async def list_lessons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤"""
    data = BotData.load()
    user_id = str(update.effective_user.id)

    if data['users'].get(user_id, {}).get('role') != 'mother':
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤!",
                                        reply_markup=MOTHER_KEYBOARD)
        return

    if not data['lessons']:
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞.", reply_markup=MOTHER_KEYBOARD)
        return

    lessons_text = "üìö –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤:\n\n"
    for lesson_num, lesson_data in sorted(data['lessons'].items(), key=lambda x: int(x[0])):
        dt = datetime.fromisoformat(lesson_data['timestamp'])
        media_type = "üé¨ –í–∏–¥–µ–æ" if lesson_data.get('type') == 'video' else "üì∏ –§–æ—Ç–æ"
        reports_count = len(data['reports'].get(lesson_num, []))

        lessons_text += (
            f"üî¢ –£—Ä–æ–∫ #{lesson_num} ({media_type})\n"
            f"‚è∞ {dt.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –û—Ç—á–µ—Ç–æ–≤: {reports_count}\n\n"
        )

    await update.message.reply_text(lessons_text, reply_markup=MOTHER_KEYBOARD)


async def request_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –ø–æ —É—Ä–æ–∫—É"""
    data = BotData.load()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback)
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user_id = str(query.from_user.id)
        message = query.message
    else:
        user_id = str(update.effective_user.id)
        message = update.message

    if data['users'].get(user_id, {}).get('role') != 'son':
        await message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—ã–Ω–æ–≤—å—è –º–æ–≥—É—Ç —Å–¥–∞–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã!", reply_markup=SON_KEYBOARD)
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —É—Ä–æ–∫
    last_lesson = context.user_data.get('last_lesson')
    if not last_lesson:
        current_lesson = data['users'][user_id].get('current_lesson', 1) - 1
        if current_lesson < 1:
            await message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞", reply_markup=SON_KEYBOARD)
            return ConversationHandler.END
        context.user_data['report_lesson'] = current_lesson
    else:
        context.user_data['report_lesson'] = last_lesson

    lesson_number = context.user_data['report_lesson']

    await message.reply_text(
        f"üìù –û—Ç—á–µ—Ç –ø–æ —É—Ä–æ–∫—É #{lesson_number}\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é:",
        reply_markup=ReplyKeyboardRemove()
    )
    return REPORT_TEXT


async def handle_report_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞"""
    text = update.message.text
    lesson_number = context.user_data.get('report_lesson')

    if not lesson_number:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=SON_KEYBOARD)
        return ConversationHandler.END

    context.user_data['report_text'] = text

    await update.message.reply_text(
        "üì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    return REPORT_PHOTO


async def handle_report_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç—á–µ—Ç–∞"""
    lesson_number = context.user_data.get('report_lesson')
    text = context.user_data.get('report_text')
    user_id = str(update.effective_user.id)

    if not lesson_number or not text:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ", reply_markup=SON_KEYBOARD)
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –æ—Ç—á–µ—Ç–∞
    report_dir = os.path.join(REPORTS_DIR, str(lesson_number))
    os.makedirs(report_dir, exist_ok=True)

    photo = update.message.photo[-1]
    file_path = os.path.join(report_dir, f"{user_id}.jpg")
    await (await photo.get_file()).download_to_drive(file_path)

    await save_report(context, user_id, lesson_number, text, file_path, update.effective_user.full_name)

    await update.message.reply_text(
        "‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!",
        reply_markup=SON_KEYBOARD
    )
    return ConversationHandler.END


async def save_report(context: ContextTypes.DEFAULT_TYPE, user_id: str, lesson_number: int,
                      text: str, photo_path: str, user_name: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –º–∞—Ç—å"""
    data = BotData.load()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    if str(lesson_number) not in data['reports']:
        data['reports'][str(lesson_number)] = []

    report = {
        'user_id': user_id,
        'text': text,
        'timestamp': datetime.now().isoformat(),
        'status': 'pending'
    }

    if photo_path:
        report['photo'] = photo_path

    data['reports'][str(lesson_number)].append(report)
    report_idx = len(data['reports'][str(lesson_number)]) - 1
    BotData.save(data)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞–º—É
    mothers = [uid for uid, udata in data['users'].items() if udata.get('role') == 'mother']
    for mother_id in mothers:
        try:
            message_text = (
                f"üìù –ü–æ–ª—É—á–µ–Ω –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–∏—é #{lesson_number}!\n"
                f"üë§ –û—Ç: {user_name}\n"
                f"üìÑ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {text}"
            )

            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{lesson_number}_{user_id}_{report_idx}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{lesson_number}_{user_id}_{report_idx}")
                ]
            ]

            if photo_path:
                await context.bot.send_photo(
                    chat_id=int(mother_id),
                    photo=open(photo_path, 'rb'),
                    caption=message_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await context.bot.send_message(
                    chat_id=int(mother_id),
                    text=message_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –º–∞—Ç–µ—Ä–∏ {mother_id}: {e}")


async def handle_report_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –ø–æ –æ—Ç—á–µ—Ç—É"""
    query = update.callback_query
    await query.answer()

    action, lesson_number, user_id, report_idx = query.data.split('_')
    lesson_number = int(lesson_number)
    report_idx = int(report_idx)

    data = BotData.load()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞
    if str(lesson_number) not in data['reports'] or report_idx >= len(data['reports'][str(lesson_number)]):
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    report = data['reports'][str(lesson_number)][report_idx]
    if action == 'approve':
        report['status'] = 'approved'
        status_text = "‚úÖ –ø—Ä–∏–Ω—è—Ç"
        son_message = f"üéâ –ú–∞–º–∞ –ø—Ä–∏–Ω—è–ª–∞ —Ç–≤–æ–π –æ—Ç—á–µ—Ç –ø–æ —É—Ä–æ–∫—É #{lesson_number}!"
    else:
        report['status'] = 'rejected'
        status_text = "‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω"
        son_message = f"üò¢ –ú–∞–º–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ —Ç–≤–æ–π –æ—Ç—á–µ—Ç –ø–æ —É—Ä–æ–∫—É #{lesson_number}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–¥–µ–ª–∞–π –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å –æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ."

    BotData.save(data)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—ã–Ω–∞
    try:
        await context.bot.send_message(
            chat_id=int(user_id),
            text=son_message,
            reply_markup=SON_KEYBOARD
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–æ–º
    try:
        if query.message.photo:
            await query.edit_message_caption(
                caption=f"{query.message.caption}\n\n–°—Ç–∞—Ç—É—Å: {status_text}"
            )
        else:
            await query.edit_message_text(
                text=f"{query.message.text}\n\n–°—Ç–∞—Ç—É—Å: {status_text}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def cancel_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user_id = str(query.from_user.id)
        message = query.message
    else:
        user_id = str(update.effective_user.id)
        message = update.message

    data = BotData.load()
    role = data['users'].get(user_id, {}).get('role')

    if role == 'mother':
        reply_markup = MOTHER_KEYBOARD
    else:
        reply_markup = SON_KEYBOARD

    if update.callback_query:
        await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=reply_markup
        )
    else:
        await message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=reply_markup)
    return ConversationHandler.END


async def check_availability(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Ä–æ–∫–∞"""
    query = update.callback_query
    await query.answer()

    data = BotData.load()
    user_id = str(query.from_user.id)

    if data['users'].get(user_id, {}).get('role') != 'son':
        await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ —Å—ã–Ω–æ–≤—å—è –º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —É—Ä–æ–∫–∏!", reply_markup=SON_KEYBOARD)
        return

    current_lesson = data['users'][user_id].get('current_lesson', 1)
    await show_son_status(query.message, data, user_id)


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    for folder in [LESSONS_DIR, REPORTS_DIR]:
        os.makedirs(folder, exist_ok=True)

    application = Application.builder().token("7636649473:AAGKLzuI-az8HNnuZamhUgLYDMrhfvDJmY0").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.Regex('^üìù –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫$'), request_lesson),
            MessageHandler(filters.Regex('^üé¨ –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫$'), get_lesson),
            MessageHandler(filters.Regex('^üìù –°–¥–∞—Ç—å –æ—Ç—á–µ—Ç$'), request_report),
            CallbackQueryHandler(request_report, pattern='^submit_report_')
        ],
        states={
            ROLE_SELECTION: [CallbackQueryHandler(role_selection, pattern='^(mother|son)$')],
            UPLOAD_NEXT_LESSON: [MessageHandler(filters.VIDEO | filters.PHOTO, handle_lesson_media)],
            REPORT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_report_text)],
            REPORT_PHOTO: [MessageHandler(filters.PHOTO, handle_report_photo)],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_action),
            MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_action),
            CallbackQueryHandler(cancel_action, pattern='^cancel_report$')
        ],
        per_message=False
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('reset_data', BotData.reset))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Regex('^üìã –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤$'), list_lessons))
    application.add_handler(MessageHandler(filters.Regex('^üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–¥–∞–Ω–∏–∏$'), remind_task))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(notify_mother, pattern='^notify_mother$'))
    application.add_handler(CallbackQueryHandler(check_availability, pattern='^check_availability$'))
    application.add_handler(CallbackQueryHandler(handle_report_review, pattern='^(approve|reject)_\d+_\d+_\d+$'))

    application.run_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


if __name__ == '__main__':
    main()